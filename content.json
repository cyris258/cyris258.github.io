{"meta":{"title":"GAL","subtitle":"","description":"","author":"cyris","url":"https://cyris258.github.io","root":"/"},"pages":[{"title":"ab","text":"","path":"ab/index.html","date":"02-19","excerpt":""},{"title":"about","text":"","path":"about/index.html","date":"02-19","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"02-19","excerpt":""},{"title":"404","text":"","path":"404/index.html","date":"02-19","excerpt":""}],"posts":[{"title":"sqlite转mysql","text":"第一步： 将sqlites的结构和数据导出为sql文件 第二步： 替换 “ 为 &#96; , text 为 varchar , integer 为 INTRGER 在头部 删除PRAGMA foreign_keys &#x3D; false; 添加SET NAMES utf6mb4; SET FOREGIN_KEYS_CHECKS&#x3D;0; 最后位置 删除PRAGMA foreign_keys &#x3D; true; 添加 SET FOREGIN_KEYS_CHECKS&#x3D;1; 第三步： 将修改好的文件导入执行 待解决问题： 有数据超出范围 原因： 类型 数据库 范围 INTEGER MySQL (SIGNED) -2,147,483,648到2,147,483,647 INTEGER MySQL (UNSIGNED) 0到4,294,967,295 INTEGER SQLite -9,223,372,036,854,775,808到9,223,372,036,854,775,807 其他资料： MySQL 的 INTEGER 是 4 字节，范围相对较小（SIGNED 范围从 -2.1B 到 2.1B，UNSIGNED 范围从 0 到 4.3B）。SQLite 的 INTEGER 是动态长度的，最大可以表示 64 位整数。 存储方式：SQLite 根据数值大小动态分配存储空间，而 MySQL 则是固定大小的（INT 4 字节）。 无符号整数：MySQL 支持 UNSIGNED 类型，可以存储更大的正整数，而 SQLite 不支持无符号整数。","path":"2024/11/29/sqlite转mysql/","date":"11-29","excerpt":"","tags":[{"name":"技术","slug":"技术","permalink":"https://cyris258.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"数据库","slug":"数据库","permalink":"https://cyris258.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"","text":"","path":"2024/11/29/项目分解为多个项目的加载问题/","date":"11-29","excerpt":"","tags":[]},{"title":"书签快捷键","text":"ctrl fn11 标记书签 shift fn11 查看所有书签 ctrl + alt +t 常见语句 if else try catch","path":"2024/11/29/快捷键/","date":"11-29","excerpt":"","tags":[{"name":"技术","slug":"技术","permalink":"https://cyris258.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"idea","slug":"idea","permalink":"https://cyris258.github.io/tags/idea/"}]},{"title":"接口返回类型最好是 void","text":"接口返回类型最好是 void在这个特定的情况下，如果 exportAzurExcel 方法返回其他类型（如 String、Object、或 ResponseEntity），将对方法的设计和调用方式产生影响。以下是一些常见的返回类型及其影响： 返回 String: 影响: 返回 String 通常用于返回视图名称或简单的文本响应。这会改变方法的语义，使得调用者期望接收一个字符串而不是下载文件。 示例 : 123456java复制代码@GetMapping(&quot;/exportAzurExcel&quot;)@ApiModelProperty(&quot;下载舰娘excel模板文件&quot;)public String exportAzurExcel(HttpServletResponse response) &#123; azKantaiService.exportAzurExcel(response); return &quot;success&quot;;&#125; 结果: 客户端可能会收到 success 字符串，而不是期望的文件下载。 返回 Object: 影响: 返回 Object 适用于返回任意类型的数据。这通常用于 RESTful API 返回 JSON 数据，但在文件下载的情况下不合适。 示例 : 123456java复制代码@GetMapping(&quot;/exportAzurExcel&quot;)@ApiModelProperty(&quot;下载舰娘excel模板文件&quot;)public Object exportAzurExcel(HttpServletResponse response) &#123; azKantaiService.exportAzurExcel(response); return new Object(); // 实际返回值没有意义&#125; 结果: 客户端收到一个无意义的对象，而不是文件。 返回 ResponseEntity: 影响: ResponseEntity 可以更灵活地控制 HTTP 响应，包括设置状态码和响应头。对于文件下载，这种方法是可行的，但与直接通过 HttpServletResponse 写入文件相比并没有明显优势。 示例 : 123456java复制代码@GetMapping(&quot;/exportAzurExcel&quot;)@ApiModelProperty(&quot;下载舰娘excel模板文件&quot;)public ResponseEntity&lt;Void&gt; exportAzurExcel(HttpServletResponse response) &#123; azKantaiService.exportAzurExcel(response); return ResponseEntity.ok().build();&#125; 结果: 文件下载成功，响应状态码为 200，但方法设计变得复杂。 返回 void: 影响: 返回 void 是最适合这种情况的，因为方法的主要目的是通过响应流输出文件，而不需要返回任何数据。 示例 : 12345java复制代码@GetMapping(&quot;/exportAzurExcel&quot;)@ApiModelProperty(&quot;下载舰娘excel模板文件&quot;)public void exportAzurExcel(HttpServletResponse response) &#123; azKantaiService.exportAzurExcel(response);&#125; 结果: 文件下载成功，没有多余的返回值，方法设计清晰简洁。 具体实现 1234567891011 try (InputStream inputStream = new ClassPathResource(&quot;templates/SHIP.xlsx&quot;).getInputStream(); OutputStream outputStream = response.getOutputStream()) &#123; response.setCharacterEncoding(&quot;utf-8&quot;); response.setContentType(&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;); String fileName = URLEncoder.encode(&quot;项目导入模板&quot;, &quot;UTF-8&quot;).replaceAll(&quot;\\\\+&quot;, &quot;%20&quot;); response.setHeader(&quot;Content-disposition&quot;, &quot;attachment;filename*=utf-8&#x27;&#x27;&quot; + fileName + &quot;.xlsx&quot;); IOUtils.copy(inputStream, outputStream); &#125; catch (IOException e) &#123; e.printStackTrace();// Preconditions.interrupt(&quot;模板下载失败: &quot; + e.getMessage()); &#125;","path":"2024/11/29/导出excel/","date":"11-29","excerpt":"","tags":[{"name":"技术","slug":"技术","permalink":"https://cyris258.github.io/tags/%E6%8A%80%E6%9C%AF/"}]},{"title":"maven打包","text":"针对maven更改jdk版本为项目所需{ 高级系统设置-&gt;环境变量-&gt;修改”JAVA_HOME”的值为对应版本（事先准备了多个版本） } 打包命令：mvn clean package 父模块管理然后打包 jar包在target目录下 启动 选择对应版本的java.exe命令：xxx&#x2F;xxx&#x2F;xxx&#x2F;java -jar xxx.jar 也可以用脚本启动 —————————————-分割线————————————————– 现在直接用maven插件，先打包然后下载在本地（给其他需要的包提供依赖）","path":"2024/11/29/多模块打包事项/","date":"11-29","excerpt":"","tags":[{"name":"技术","slug":"技术","permalink":"https://cyris258.github.io/tags/%E6%8A%80%E6%9C%AF/"}]},{"title":"包名规范","text":"不能以数字开头，比如com.xxx.web.123。","path":"2024/11/29/包名/","date":"11-29","excerpt":"","tags":[{"name":"技术","slug":"技术","permalink":"https://cyris258.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"命名","slug":"命名","permalink":"https://cyris258.github.io/tags/%E5%91%BD%E5%90%8D/"}]},{"title":"优雅判断重名","text":"优雅的判断重名 12345AzKantaiEntity one = this.getBaseMapper().selectOne(new LambdaQueryWrapperV&lt;AzKantaiEntity&gt;() .eq(AzKantaiEntity::getName, azKantaiDto.getName()));if (Objects.nonNull(one) &amp;&amp; !Objects.equals(one.getId(), dtoId)) &#123; throw new AzurSearchException(ExceptionEnum.Name_DULICATION.getResultCode(), ExceptionEnum.Name_DULICATION.getResultMsg());&#125; 先根据名称查询到这个对象 当为空的时候跳过判断 不为空时，判断其id 和传过来的id 比较，相同表示是修改允许重名，不同则抛出异常","path":"2024/11/29/判断重名/","date":"11-29","excerpt":"","tags":[{"name":"技术","slug":"技术","permalink":"https://cyris258.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"java","slug":"java","permalink":"https://cyris258.github.io/tags/java/"}]},{"title":"序列化问题","text":"序列化是会自动序列化以下内容： 类的默认构造函数：如果你使用了 @JsonIgnoreProperties 或者其他 Jackson 的注解，或者类中包含了额外的字段（例如继承的父类字段），可能会导致序列化时包括这些字段。 父类的字段：如果你的类继承了某个父类，并且父类中有字段，Jackson 默认会序列化父类的字段，即使它们不在子类中。 Getter&#x2F;Setter 方法：Jackson 会通过 getter 方法推断要序列化的字段。如果你的类中存在不希望序列化的额外字段，但是它有对应的 getter 方法，Jackson 也可能会序列化这些字段。 Jackson 默认行为：Jackson 默认会序列化所有 public 或通过 getter 方法暴露的字段。即使你只有一个字段 Map&lt;String, List&lt;Edge&gt;&gt;，其他字段（如果存在）可能也会被序列化。","path":"2024/11/29/关于ObjectMapper/","date":"11-29","excerpt":"","tags":[{"name":"技术","slug":"技术","permalink":"https://cyris258.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"java","slug":"java","permalink":"https://cyris258.github.io/tags/java/"}]},{"title":"特殊文件","text":"同步文件时多余的文件","path":"2024/11/29/Untitled/","date":"11-29","excerpt":"","tags":[]},{"title":"switch踩坑","text":"123456789public static void main(String[] args) &#123; Integer a = null; switch (a) &#123; case 1: System.out.println(1); default: System.out.println(0); &#125;&#125; 结果 12Exception in thread &quot;main&quot; java.lang.NullPointerException at te.as.main(as.java:6) a不能为空","path":"2024/11/29/switch坑/","date":"11-29","excerpt":"","tags":[{"name":"技术","slug":"技术","permalink":"https://cyris258.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"java","slug":"java","permalink":"https://cyris258.github.io/tags/java/"}]},{"title":"stream流为空报错","text":"toMap时不允许值为空的情况","path":"2024/11/29/stream流空/","date":"11-29","excerpt":"","tags":[{"name":"技术","slug":"技术","permalink":"https://cyris258.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"java","slug":"java","permalink":"https://cyris258.github.io/tags/java/"}]},{"title":"bigdeciaml踩坑","text":"第一：浮点类型的坑 在学习了解BigDecimal的坑之前，先来说一个老生常谈的问题：如果使用Float、Double等浮点类型进行计算时，有可能得到的是一个近似值，而不是精确的值。 比如下面的代码： 123456@Test public void test0()&#123; float a = 1; float b = 0.9f; System.out.println(a - b); &#125; 结果是多少？0.1吗？不是，执行上面代码执行的结果是0.100000024。之所以产生这样的结果，是因为0.1的二进制表示是无限循环的。由于计算机的资源是有限的，所以是没办法用二进制精确的表示 0.1，只能用「近似值」来表示，就是在有限的精度情况下，最大化接近 0.1 的二进制数，于是就会造成精度缺失的情况。 关于上述的现象大家都知道，不再详细展开。同时，还会得出结论在科学计数法时可考虑使用浮点类型，但如果是涉及到金额计算要使用BigDecimal来计算。 那么，BigDecimal就一定能避免上述的浮点问题吗？来看下面的示例： 1234567@Test public void test1()&#123; BigDecimal a = new BigDecimal(0.01); BigDecimal b = BigDecimal.valueOf(0.01); System.out.println(&quot;a = &quot; + a); System.out.println(&quot;b = &quot; + b); &#125; 上述单元测试中的代码，a和b结果分别是什么？ 12a = 0.01000000000000000020816681711721685132943093776702880859375b = 0.01 上面的实例说明，即便是使用BigDecimal，结果依旧会出现精度问题。这就涉及到创建BigDecimal对象时，如果有初始值，是采用new BigDecimal的形式，还是通过BigDecimal#valueOf方法了。 之所以会出现上述现象，是因为new BigDecimal时，传入的0.1已经是浮点类型了，鉴于上面说的这个值只是近似值，在使用new BigDecimal时就把这个近似值完整的保留下来了。 而BigDecimal#valueOf则不同，它的源码实现如下： 1234567public static BigDecimal valueOf(double val) &#123; // Reminder: a zero double returns &#x27;0.0&#x27;, so we cannot fastpath // to use the constant ZERO. This might be important enough to // justify a factory approach, a cache, or a few private // constants, later. return new BigDecimal(Double.toString(val)); &#125; 在valueOf内部，使用Double#toString方法，将浮点类型的值转换成了字符串，因此就不存在精度丢失问题了。 此时就得出一个基本的结论：第一，在使用BigDecimal构造函数时，尽量传递字符串而非浮点类型；第二，如果无法满足第一条，则可采用BigDecimal#valueOf方法来构造初始化值。 这里延伸一下，BigDecimal常见的构造方法有如下几种： 1234BigDecimal(int) 创建一个具有参数所指定整数值的对象。BigDecimal(double) 创建一个具有参数所指定双精度值的对象。BigDecimal(long) 创建一个具有参数所指定长整数值的对象。BigDecimal(String) 创建一个具有参数所指定以字符串表示的数值的对象。 其中涉及到参数类型为double的构造方法，会出现上述的问题，使用时需特别留意。 第二：浮点精度的坑 如果比较两个BigDecimal的值是否相等，你会如何比较？使用equals方法还是compareTo方法呢？ 先来看一个示例： 1234567@Test public void test2()&#123; BigDecimal a = new BigDecimal(&quot;0.01&quot;); BigDecimal b = new BigDecimal(&quot;0.010&quot;); System.out.println(a.equals(b)); System.out.println(a.compareTo(b)); &#125; 乍一看感觉可能相等，但实际上它们的本质并不相同。 equals方法是基于BigDecimal实现的equals方法来进行比较的，直观印象就是比较两个对象是否相同，那么代码是如何实现的呢？ 1234567891011121314151617181920@Override public boolean equals(Object x) &#123; if (!(x instanceof BigDecimal)) return false; BigDecimal xDec = (BigDecimal) x; if (x == this) return true; if (scale != xDec.scale) return false; long s = this.intCompact; long xs = xDec.intCompact; if (s != INFLATED) &#123; if (xs == INFLATED) xs = compactValFor(xDec.intVal); return xs == s; &#125; else if (xs != INFLATED) return xs == compactValFor(this.intVal); return this.inflated().equals(xDec.inflated()); &#125; 仔细阅读代码可以看出，equals方法不仅比较了值是否相等，还比较了精度是否相同。上述示例中，由于两者的精度不同，所以equals方法的结果当然是false了。而compareTo方法实现了Comparable接口，真正比较的是值的大小，返回的值为-1（小于），0（等于），1（大于）。 基本结论：通常情况，如果比较两个BigDecimal值的大小，采用其实现的compareTo方法；如果严格限制精度的比较，那么则可考虑使用equals方法。 另外，这种场景在比较0值的时候比较常见，比如比较BigDecimal(“0”)、BigDecimal(“0.0”)、BigDecimal(“0.00”)，此时一定要使用compareTo方法进行比较。 第三：设置精度的坑 在项目中看到好多同学通过BigDecimal进行计算时不设置计算结果的精度和舍入模式，真是着急人，虽然大多数情况下不会出现什么问题。但下面的场景就不一定了： 123456@Test public void test3()&#123; BigDecimal a = new BigDecimal(&quot;1.0&quot;); BigDecimal b = new BigDecimal(&quot;3.0&quot;); a.divide(b); &#125; 执行上述代码的结果是什么？ArithmeticException异常！ 1234java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result. at java.math.BigDecimal.divide(BigDecimal.java:1690) ... 这个异常的发生在官方文档中也有说明： If the quotient has a nonterminating decimal expansion and the operation is specified to return an exact result, an ArithmeticException is thrown. Otherwise, the exact result of the division is returned, as done for other operations. 总结一下就是，如果在除法（divide）运算过程中，如果商是一个无限小数（0.333…），而操作的结果预期是一个精确的数字，那么将会抛出ArithmeticException异常。 此时，只需在使用divide方法时指定结果的精度即可： 1234567@Test public void test3()&#123; BigDecimal a = new BigDecimal(&quot;1.0&quot;); BigDecimal b = new BigDecimal(&quot;3.0&quot;); BigDecimal c = a.divide(b, 2,RoundingMode.HALF_UP); System.out.println(c); &#125; 执行上述代码，输入结果为0.33。 基本结论：在使用BigDecimal进行（所有）运算时，一定要明确指定精度和舍入模式。 拓展一下，舍入模式定义在RoundingMode枚举类中，共有8种： RoundingMode.UP：舍入远离零的舍入模式。在丢弃非零部分之前始终增加数字(始终对非零舍弃部分前面的数字加1)。注意，此舍入模式始终不会减少计算值的大小。 RoundingMode.DOWN：接近零的舍入模式。在丢弃某部分之前始终不增加数字(从不对舍弃部分前面的数字加1，即截短)。注意，此舍入模式始终不会增加计算值的大小。 RoundingMode.CEILING：接近正无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUNDUP 相同;如果为负，则舍入行为与 ROUNDDOWN 相同。注意，此舍入模式始终不会减少计算值。 RoundingMode.FLOOR：接近负无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUNDDOWN 相同;如果为负，则舍入行为与 ROUNDUP 相同。注意，此舍入模式始终不会增加计算值。 RoundingMode.HALF_UP：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。如果舍弃部分 &gt;&#x3D; 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同。注意，这是我们在小学时学过的舍入模式(四舍五入)。 RoundingMode.HALF_DOWN：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为上舍入的舍入模式。如果舍弃部分 &gt; 0.5，则舍入行为与 ROUND_UP 相同;否则舍入行为与 ROUND_DOWN 相同(五舍六入)。 RoundingMode.HALF_EVEN：向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。如果舍弃部分左边的数字为奇数，则舍入行为与 ROUNDHALFUP 相同;如果为偶数，则舍入行为与 ROUNDHALF_DOWN 相同。注意，在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。此舍入模式也称为“银行家舍入法”，主要在美国使用。四舍六入，五分两种情况。如果前一位为奇数，则入位，否则舍去。以下例子为保留小数点1位，那么这种舍入方式下的结果。1.15 &#x3D;&#x3D;&gt; 1.2 ,1.25 &#x3D;&#x3D;&gt; 1.2 RoundingMode.UNNECESSARY：断言请求的操作具有精确的结果，因此不需要舍入。如果对获得精确结果的操作指定此舍入模式，则抛出ArithmeticException。 通常我们使用的四舍五入即RoundingMode.HALF_UP。 第四：三种字符串输出的坑 先来看看下面的代码： 12345@Testpublic void test4()&#123; BigDecimal a = BigDecimal.valueOf(35634535255456719.22345634534124578902); System.out.println(a.toString());&#125; 执行的结果是上述对应的值吗？并不是： 13.563453525545672E+16 也就是说，本来想打印字符串的，结果打印出来的是科学计数法的值。 这里我们需要了解BigDecimal转换字符串的三个方法 toPlainString()：不使用任何科学计数法； toString()：在必要的时候使用科学计数法； toEngineeringString() ：在必要的时候使用工程计数法。类似于科学计数法，只不过指数的幂都是3的倍数，这样方便工程上的应用，因为在很多单位转换的时候都是10^3； 三种方法展示结果示例如下： 计算法 基本结论：**根据数据结果展示格式不同，采用不同的字符串输出方法，通常使用比较多的方法为toPlainString()**。 另外，NumberFormat类的format()方法可以使用BigDecimal对象作为其参数，可以利用BigDecimal对超出16位有效数字的货币值，百分值，以及一般数值进行格式化控制。 使用示例如下： 1234567891011NumberFormat currency = NumberFormat.getCurrencyInstance(); //建立货币格式化引用NumberFormat percent = NumberFormat.getPercentInstance(); //建立百分比格式化引用percent.setMaximumFractionDigits(3); //百分比小数点最多3位BigDecimal loanAmount = new BigDecimal(&quot;15000.48&quot;); //金额BigDecimal interestRate = new BigDecimal(&quot;0.008&quot;); //利率BigDecimal interest = loanAmount.multiply(interestRate); //相乘System.out.println(&quot;金额:\\t&quot; + currency.format(loanAmount));System.out.println(&quot;利率:\\t&quot; + percent.format(interestRate));System.out.println(&quot;利息:\\t&quot; + currency.format(interest)); 输出结果如下： 123金额: ￥15,000.48 利率: 0.8% 利息: ￥120.00","path":"2024/11/29/BigDecimal的坑/","date":"11-29","excerpt":"","tags":[{"name":"技术","slug":"技术","permalink":"https://cyris258.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"java","slug":"java","permalink":"https://cyris258.github.io/tags/java/"}]},{"title":"","text":"默认 required属性为true","path":"2024/11/29/@RequestParam注意/","date":"11-29","excerpt":"","tags":[]},{"title":"博丽神庙","text":"这个是图片","path":"2024/11/28/df/","date":"11-28","excerpt":"","tags":[{"name":"acg","slug":"acg","permalink":"https://cyris258.github.io/tags/acg/"},{"name":"幻想乡","slug":"幻想乡","permalink":"https://cyris258.github.io/tags/%E5%B9%BB%E6%83%B3%E4%B9%A1/"}]},{"title":"","text":"知识点加密明文密码然后将其存储 BCryptPasswordEncoder passwordEncoder &#x3D; new BCryptPasswordEncoder();String password &#x3D; passwordEncoder.encode(memberRegisterVo.getPassword());member.setPassword(password); spring框架","path":"2024/11/28/知识点1存储/","date":"11-28","excerpt":"","tags":[]},{"title":"","text":"@RestController注解： @RestController 是一个组合注解，它是@Controller和@ResponseBody的组合。它表明这个类是一个控制器，并且每个方法的返回值都会被自动转换为JSON格式的响应。 这与普通的@Controller注解不同，后者默认期望视图解析器来解析返回的字符串作为视图名，而@RestController直接将返回值写入HTTP响应体。 @RequestMapping(&quot;/voucher-order&quot;)注解： @RequestMapping 用于映射HTTP请求路径，将指定的路径与控制器或控制器方法关联起来。在这里，控制器上的@RequestMapping(&quot;/voucher-order&quot;)表示所有方法的基本路径都是/voucher-order。 @PathVariable 用于提取 URI 模板中的值。 @GetMapping(“&#x2F;users&#x2F;{userId}”)public ResponseEntity getUserById(@PathVariable Long userId) {&#x2F;&#x2F; 处理逻辑} @RequestParam 用于获取查询参数的值。 @GetMapping(“&#x2F;users”)public ResponseEntity getUserByName(@RequestParam String name) {&#x2F;&#x2F; 处理逻辑} @RequestBody 用于获取请求体中的数据 @PostMapping(“&#x2F;users”)public ResponseEntity createUser(@RequestBody User user) {&#x2F;&#x2F; 处理逻辑}","path":"2024/11/28/注解/","date":"11-28","excerpt":"","tags":[]},{"title":"","text":"循环依赖指的是两个或多个 bean 彼此之间相互依赖，形成了一个循环的依赖关系。在 Spring 中，循环依赖是一种需要特别注意的情况，因为如果处理不当，可能会导致应用程序启动失败或者出现运行时的问题。以下是一个简单的循环依赖的例子及其解决方法： 示例：循环依赖假设有两个服务类 ServiceA 和 ServiceB，彼此互相依赖： 1234567891011121314151617181920212223242526java复制代码import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class ServiceA &#123; private final ServiceB serviceB; @Autowired public ServiceA(ServiceB serviceB) &#123; this.serviceB = serviceB; &#125;&#125;java复制代码import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class ServiceB &#123; private final ServiceA serviceA; @Autowired public ServiceB(ServiceA serviceA) &#123; this.serviceA = serviceA; &#125;&#125; 在这个例子中，ServiceA 类依赖 ServiceB 类，而 ServiceB 类又依赖 ServiceA 类，形成了循环依赖。 解决方案： ​ 构造函数注入改为字段注入： 将构造函数注入改为字段注入可以避免循环依赖问题，因为字段注入发生在对象实例化后，不会出现循环等待的情况。 123456789101112131415161718java复制代码import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class ServiceA &#123; @Autowired private ServiceB serviceB;&#125;java复制代码import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class ServiceB &#123; @Autowired private ServiceA serviceA;&#125; 使用 @Lazy 注解： 可以使用 @Lazy 注解延迟加载 bean，以避免立即初始化并解决循环依赖问题。 12345678910111213141516171819202122232425262728java复制代码import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Lazy;import org.springframework.stereotype.Service;@Servicepublic class ServiceA &#123; private final ServiceB serviceB; @Autowired public ServiceA(@Lazy ServiceB serviceB) &#123; this.serviceB = serviceB; &#125;&#125;java复制代码import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Lazy;import org.springframework.stereotype.Service;@Servicepublic class ServiceB &#123; private final ServiceA serviceA; @Autowired public ServiceB(@Lazy ServiceA serviceA) &#123; this.serviceA = serviceA; &#125;&#125; 使用 setter 方法注入： 将依赖关系通过 setter 方法注入，然后使用 @Autowired 和 @Lazy 注解来解决循环依赖问题。 12345678910111213141516171819202122232425262728java复制代码import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Lazy;import org.springframework.stereotype.Service;@Servicepublic class ServiceA &#123; private ServiceB serviceB; @Autowired public void setServiceB(@Lazy ServiceB serviceB) &#123; this.serviceB = serviceB; &#125;&#125;java复制代码import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Lazy;import org.springframework.stereotype.Service;@Servicepublic class ServiceB &#123; private ServiceA serviceA; @Autowired public void setServiceA(@Lazy ServiceA serviceA) &#123; this.serviceA = serviceA; &#125;&#125; 使用 @Autowired 和 @Qualifier 注解 结合 @Autowired 和 @Qualifier 注解，可以精确指定要注入的 bean。这种方法可以帮助 Spring 解析循环依赖。 示例：12345678910111213141516171819202122232425262728java复制代码import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.stereotype.Service;@Servicepublic class ServiceA &#123; private final ServiceB serviceB; @Autowired public ServiceA(@Qualifier(&quot;serviceB&quot;) ServiceB serviceB) &#123; this.serviceB = serviceB; &#125;&#125;java复制代码import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.stereotype.Service;@Servicepublic class ServiceB &#123; private final ServiceA serviceA; @Autowired public ServiceB(@Qualifier(&quot;serviceA&quot;) ServiceA serviceA) &#123; this.serviceA = serviceA; &#125;&#125; 在这个示例中，通过 @Qualifier 注解指定了要注入的具体 bean 的名称，从而帮助 Spring 正确解析循环依赖。 使用 @PostConstruct 方法 可以在一个 bean 的初始化方法中手动设置另一个 bean 的依赖。@PostConstruct 注解可以用来标记初始化方法，在 bean 的依赖注入完成后调用。 示例：12345678910111213141516171819202122232425262728293031323334java复制代码import javax.annotation.PostConstruct;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class ServiceA &#123; private ServiceB serviceB; @Autowired private ServiceB serviceBProxy; @PostConstruct public void init() &#123; this.serviceB = serviceBProxy; &#125;&#125;java复制代码import javax.annotation.PostConstruct;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class ServiceB &#123; private ServiceA serviceA; @Autowired private ServiceA serviceAProxy; @PostConstruct public void init() &#123; this.serviceA = serviceAProxy; &#125;&#125; 在这个示例中，通过在 ServiceA 和 ServiceB 类中分别注入对方的代理对象，并在 @PostConstruct 方法中设置真正的依赖，从而解决循环依赖的问题。 原理： 在 Spring 框架中，当处理循环依赖时，Spring 会利用代理对象来解决依赖注入的问题。具体来说，Spring 在处理循环依赖时会有以下几种情况： 普通情况下的注入： 当没有循环依赖时，@Autowired 注解会直接将实际的 bean 实例注入到目标对象中。 循环依赖的处理： 当存在循环依赖时，Spring 会采用提前暴露（early exposure）的策略。这意味着在一个 bean 还没有完全初始化时，Spring 可能会先暴露一个未完全初始化的代理对象给依赖它的其他 bean。 代理对象的标识： Spring 为了区分实际 bean 和代理对象，在代理对象上通常会实现特定的接口，如 org.springframework.aop.SpringProxy 或 org.springframework.aop.framework.Advised。这些接口可以用来检查一个对象是否是代理对象。 1234567891011121314151617181920212223import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.aop.SpringProxy;import org.springframework.aop.framework.Advised;@Servicepublic class ServiceC &#123;private ServiceA serviceA;@Autowiredprivate ServiceA serviceAProxy;public void checkProxy() &#123; if (serviceAProxy instanceof SpringProxy) &#123; System.out.println(&quot;serviceAProxy is a Spring proxy&quot;); &#125; if (serviceAProxy instanceof Advised) &#123; System.out.println(&quot;serviceAProxy is Advised&quot;); &#125; &#125;&#125; 使用 @DependsOn 注解 可以使用 @DependsOn 注解来指定 bean 的创建顺序，从而帮助 Spring 正确处理循环依赖。 示例：123456789101112131415161718192021222324252627282930java复制代码import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.DependsOn;import org.springframework.stereotype.Service;@Service@DependsOn(&quot;serviceB&quot;)public class ServiceA &#123; private final ServiceB serviceB; @Autowired public ServiceA(ServiceB serviceB) &#123; this.serviceB = serviceB; &#125;&#125;java复制代码import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.DependsOn;import org.springframework.stereotype.Service;@Service@DependsOn(&quot;serviceA&quot;)public class ServiceB &#123; private final ServiceA serviceA; @Autowired public ServiceB(ServiceA serviceA) &#123; this.serviceA = serviceA; &#125;&#125; 在这个示例中，通过 @DependsOn 注解显式指定 bean 的依赖顺序，确保 ServiceA 在 ServiceB 之后创建，从而解决循环依赖的问题。","path":"2024/11/28/注入的循环依赖问题/","date":"11-28","excerpt":"","tags":[]},{"title":"","text":"StpUtil123456&lt;!-- Sa-Token 权限认证 --&gt;&lt;dependency&gt; &lt;groupId&gt;cn.dev33&lt;/groupId&gt; &lt;artifactId&gt;sa-token-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;sa-token.version&#125;&lt;/version&gt;&lt;/dependency&gt; Token 认证： 提供了通过 Token 进行身份认证的功能。sa-token 使用 Token 来标识用户身份，可以通过配置启用或禁用 Token 认证。 Session 管理： 支持基于 Session 的会话管理。可以配置 Session 的过期时间、定时清理等相关参数。 角色和权限控制： 提供了简单易用的角色和权限控制机制。可以通过注解或 API 进行角色和权限的验证。 自定义登录认证逻辑： 允许用户自定义登录认证逻辑，以适应不同的身份验证需求。 多端登录管理： 支持多端登录，可以限制同一账号在多少个终端登录。 黑名单、白名单管理： 支持用户的黑名单和白名单功能，可以灵活控制用户的访问权限。 记住我功能： 支持记住我功能，使用户在一段时间内免登录。 多Realm支持： 支持配置多个 Realm，用于不同类型的用户认证。 会话治理： 提供了一些会话治理的相关功能，例如强制踢出登录等。 在线会话查看： 提供了在线用户会话查看的功能，可以查看当前在线的用户信息。 事件监听器： 支持事件监听器，可以监听 sa-token 的各种事件，进行自定义处理。","path":"2024/11/28/StpUtil/","date":"11-28","excerpt":"","tags":[]},{"title":"","text":"RequestMappingHandlerMapping是Spring MVC HandlerMapping的一个实现，主要用于针对控制器类(带有注解@Controller)中类级别或者方法级别的注解@RequestMapping创建RequestMappingInfo并管理。 RequestMappingHandlerMapping工作原理大致是这样的 : 应用启动阶段RequestMappingHandlerMapping实现了接口InitializingBean,它的初始化方法会设置各种工作参数，并检测容器中所有的控制器方法并将它们登记管理起来。针对每个使用注解@RequestMapping的控制器方法所生成的请求匹配条件是一个RequestMappingInfo对象，最终所被管理的是一个HandlerMethod对象。运行时当一个请求到达时，RequestMappingHandlerMapping会被DispatcherServlet用于匹配一个HandlerMethod并最终调用它处理该请求。匹配的依据是当前请求中的路径信息和RequestMappingHandlerMapping所管理的每个控制器方法的RequestMappingInfo请求匹配条件。","path":"2024/11/28/RequestMappingInfo/","date":"11-28","excerpt":"","tags":[]},{"title":"jwt令牌","text":"jwt 1xxxxx.yyyyy.zzzzz xxxxx 是头部（Header） 报头通常由两部分组成: Token的类型(即 JWT)和所使用的签名算法(如 HMAC SHA256或 RSA)。 yyyyy 是负载（Payload） Token的第二部分是有效负载，其中包含声明。声明是关于实体(通常是用户)和其他数据的语句。有三种类型的声明: registered claims, public claims, and private claims zzzzz 是签名（Signature） 要创建Signature，您必须获取编码的标头（header）、编码的有效载荷(payload)、secret、标头中指定的算法，并对其进行签名 客户端发送登入请求 服务端接受验证后 使用sercret加盐后发送jwt令牌 客户端接受令牌 发送请求时携带jwt令牌 服务端验证令牌 正确后返回结果 123456&lt;!--JWT(Json Web Token)登录支持--&gt; &lt;dependency&gt; &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt; &lt;artifactId&gt;jjwt&lt;/artifactId&gt; &lt;version&gt;0.9.1&lt;/version&gt; &lt;/dependency&gt; 123456789101112131415161718192021222324// JWT头部分信息【Header】Map&lt;String, Object&gt; header = new HashMap&lt;&gt;();header.put(&quot;alg&quot;, &quot;HS256&quot;);header.put(&quot;typ&quot;, &quot;JWT&quot;);// 载核【Payload】Map&lt;String, Object&gt; payload = new HashMap&lt;&gt;();payload.put(&quot;sub&quot;, &quot;1234567890&quot;);payload.put(&quot;name&quot;,&quot;John Doe&quot;);payload.put(&quot;admin&quot;,true);// 声明Token失效时间Calendar instance = Calendar.getInstance();instance.add(Calendar.SECOND,300);// 300s// 生成TokenString token = Jwts.builder() .setHeader(header)// 设置Header .setClaims(payload) // 设置载核 .setExpiration(instance.getTime())// 设置生效时间 .signWith(SignatureAlgorithm.HS256,&quot;secret&quot;) // 签名,这里采用私钥进行签名,不要泄露了自己的私钥信息 .compact(); // 压缩生成xxx.xxx.xxxSystem.out.println(token); 12345678910111213141516171819202122232425262728 // 生成的token String token = &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImV4cCI6MTY2MzI5NzQzMX0.Ju5EzKBpUnuIRhDG1SU0NwMGsd9Jl_8YBcMM6PB2C20&quot;; // 解析head信息 JwsHeader jwsHeader = Jwts .parser() .setSigningKey(&quot;secret&quot;) .parseClaimsJws(token) .getHeader(); System.out.println(jwsHeader); // &#123;typ=JWT, alg=HS256&#125; System.out.println(&quot;typ:&quot;+jwsHeader.get(&quot;typ&quot;)); // 解析PayloadClaims claims = Jwts .parser() .setSigningKey(&quot;secret&quot;) .parseClaimsJws(token) .getBody(); System.out.println(claims);// &#123;sub=1234567890, name=John Doe, admin=true, exp=1663297431&#125; System.out.println(&quot;admin:&quot;+claims.get(&quot;admin&quot;)); // 解析SignatureString signature = Jwts .parser() .setSigningKey(&quot;secret&quot;) .parseClaimsJws(token) .getSignature(); System.out.println(signature); // Ju5EzKBpUnuIRhDG1SU0NwMGsd9Jl_8YBcMM6PB2C20","path":"2024/11/28/jwt/","date":"11-28","excerpt":"","tags":[{"name":"技术","slug":"技术","permalink":"https://cyris258.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"网络协议","slug":"网络协议","permalink":"https://cyris258.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}]},{"title":"","text":"jdk动态代理只能代理接口","path":"2024/11/28/jdk动态代理/","date":"11-28","excerpt":"","tags":[]},{"title":"","text":"网上查dsad","path":"2024/11/28/@PointCut/","date":"11-28","excerpt":"","tags":[]}],"categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"https://cyris258.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"数据库","slug":"数据库","permalink":"https://cyris258.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"idea","slug":"idea","permalink":"https://cyris258.github.io/tags/idea/"},{"name":"命名","slug":"命名","permalink":"https://cyris258.github.io/tags/%E5%91%BD%E5%90%8D/"},{"name":"java","slug":"java","permalink":"https://cyris258.github.io/tags/java/"},{"name":"acg","slug":"acg","permalink":"https://cyris258.github.io/tags/acg/"},{"name":"幻想乡","slug":"幻想乡","permalink":"https://cyris258.github.io/tags/%E5%B9%BB%E6%83%B3%E4%B9%A1/"},{"name":"网络协议","slug":"网络协议","permalink":"https://cyris258.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}]}